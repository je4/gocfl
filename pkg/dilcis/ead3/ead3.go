// Code generated by xgen. DO NOT EDIT.

package ead3

import (
	"encoding/xml"
)

// wasnt generated...
type AvBoolean bool

// Ead ...
type Ead struct {
	XMLName             xml.Name `xml:"ead"`
	AmCommon            *AmCommon
	RelatedencodingAttr string       `xml:"relatedencoding,attr,omitempty"`
	BaseAttr            string       `xml:"base,attr,omitempty"`
	Control             *Control     `xml:"control"`
	Frontmatter         *Frontmatter `xml:"frontmatter"`
	Archdesc            *Archdesc    `xml:"archdesc"`
}

// Archdesc ...
type Archdesc struct {
	XMLName    xml.Name `xml:"archdesc"`
	AmCommon   *AmCommon
	AmDescBase *AmDescBase
	// ALevel              *ALevel
	LevelAttr           string `xml:"level,attr"`
	LocaltypeAttr       string `xml:"localtype,attr,omitempty"`
	RelatedencodingAttr string `xml:"relatedencoding,attr,omitempty"`
	BaseAttr            string `xml:"base,attr,omitempty"`
	MDescBaseDescgrp    []*MDescBaseDescgrp
	Runner              []*Runner `xml:"runner"`
	Did                 *Did      `xml:"did"`
	Dsc                 []*Dsc    `xml:"dsc"`
}

// Dsc ...
type Dsc struct {
	XMLName            xml.Name `xml:"dsc"`
	AmCommon           *AmCommon
	TpatternAttr       string `xml:"tpattern,attr,omitempty"`
	DsctypeAttr        string `xml:"dsctype,attr,omitempty"`
	OtherdsctypeAttr   string `xml:"otherdsctype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	MCOrC01            *MCOrC01
	Head               *Head  `xml:"head"`
	Thead              *Thead `xml:"thead"`
}

// C ...
type C struct {
	XMLName xml.Name `xml:"c"`
	Thead   *Thead   `xml:"thead"`
	C       []*C     `xml:"c"`
	*MCBaseDescgrp
}

// C01 ...
type C01 struct {
	XMLName xml.Name `xml:"c01"`
	Thead   *Thead   `xml:"thead"`
	C02     []*C02   `xml:"c02"`
	*MCBaseDescgrp
}

// C02 ...
type C02 struct {
	XMLName xml.Name `xml:"c02"`
	Thead   *Thead   `xml:"thead"`
	C03     []*C03   `xml:"c03"`
	*MCBaseDescgrp
}

// C03 ...
type C03 struct {
	XMLName xml.Name `xml:"c03"`
	Thead   *Thead   `xml:"thead"`
	C04     []*C04   `xml:"c04"`
	*MCBaseDescgrp
}

// C04 ...
type C04 struct {
	XMLName xml.Name `xml:"c04"`
	Thead   *Thead   `xml:"thead"`
	C05     []*C05   `xml:"c05"`
	*MCBaseDescgrp
}

// C05 ...
type C05 struct {
	XMLName xml.Name `xml:"c05"`
	Thead   *Thead   `xml:"thead"`
	C06     []*C06   `xml:"c06"`
	*MCBaseDescgrp
}

// C06 ...
type C06 struct {
	XMLName xml.Name `xml:"c06"`
	Thead   *Thead   `xml:"thead"`
	C07     []*C07   `xml:"c07"`
	*MCBaseDescgrp
}

// C07 ...
type C07 struct {
	XMLName xml.Name `xml:"c07"`
	Thead   *Thead   `xml:"thead"`
	C08     []*C08   `xml:"c08"`
	*MCBaseDescgrp
}

// C08 ...
type C08 struct {
	XMLName xml.Name `xml:"c08"`
	Thead   *Thead   `xml:"thead"`
	C09     []*C09   `xml:"c09"`
	*MCBaseDescgrp
}

// C09 ...
type C09 struct {
	XMLName xml.Name `xml:"c09"`
	Thead   *Thead   `xml:"thead"`
	C10     []*C10   `xml:"c10"`
	*MCBaseDescgrp
}

// C10 ...
type C10 struct {
	XMLName xml.Name `xml:"c10"`
	Thead   *Thead   `xml:"thead"`
	C11     []*C11   `xml:"c11"`
	*MCBaseDescgrp
}

// C11 ...
type C11 struct {
	XMLName xml.Name `xml:"c11"`
	Thead   *Thead   `xml:"thead"`
	C12     []*C12   `xml:"c12"`
	*MCBaseDescgrp
}

// C12 ...
type C12 struct {
	XMLName xml.Name `xml:"c12"`
	*MCBaseDescgrp
}

// Unittitle ...
type Unittitle struct {
	XMLName             xml.Name `xml:"unittitle"`
	AmCommon            *AmCommon
	LabelAttr           string `xml:"label,attr,omitempty"`
	EncodinganalogAttr  string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr       string `xml:"localtype,attr,omitempty"`
	NormalAttr          string `xml:"normal,attr,omitempty"`
	MMixedBasicElements []*MMixedBasicElements
	MAccess             []*MAccess
	Date                []string     `xml:"date"`
	Footnote            []*Footnote  `xml:"footnote"`
	Num                 []*Num       `xml:"num"`
	Quote               []*Quote     `xml:"quote"`
	Imprint             []*Imprint   `xml:"imprint"`
	Bibseries           []*Bibseries `xml:"bibseries"`
	Edition             []*Edition   `xml:"edition"`
	Unitdate            []*Unitdate  `xml:"unitdate"`
}

// Physdesc ...
type Physdesc struct {
	XMLName             xml.Name `xml:"physdesc"`
	AmCommon            *AmCommon
	LocaltypeAttr       string `xml:"localtype,attr,omitempty"`
	LabelAttr           string `xml:"label,attr,omitempty"`
	EncodinganalogAttr  string `xml:"encodinganalog,attr,omitempty"`
	MMixedBasicElements []*MMixedBasicElements
	MAccess             []*MAccess
	Date                []string      `xml:"date"`
	Footnote            []*Footnote   `xml:"footnote"`
	Num                 []*Num        `xml:"num"`
	Quote               []*Quote      `xml:"quote"`
	Extent              []*Extent     `xml:"extent"`
	Physfacet           []*Physfacet  `xml:"physfacet"`
	Dimensions          []*Dimensions `xml:"dimensions"`
}

// Bibref ...
type Bibref struct {
	XMLName            xml.Name `xml:"bibref"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasicPlusAccessRef
}

// Objectxmlwrap ...
type Objectxmlwrap struct {
	XMLName  xml.Name `xml:"objectxmlwrap"`
	AmCommon *AmCommon
	*EAnyname
}

// EAnyname ...
type EAnyname struct {
	XMLName xml.Name `xml:"e.anyname"`
}

// Control ...
type Control struct {
	XMLName                xml.Name `xml:"control"`
	AmCommon               *AmCommon
	EncodinganalogAttr     string                   `xml:"encodinganalog,attr,omitempty"`
	RelatedencodingAttr    string                   `xml:"relatedencoding,attr,omitempty"`
	BaseAttr               string                   `xml:"base,attr,omitempty"`
	LangencodingAttr       string                   `xml:"langencoding,attr,omitempty"`
	ScriptencodingAttr     string                   `xml:"scriptencoding,attr,omitempty"`
	DateencodingAttr       string                   `xml:"dateencoding,attr,omitempty"`
	CountryencodingAttr    string                   `xml:"countryencoding,attr,omitempty"`
	RepositoryencodingAttr string                   `xml:"repositoryencoding,attr,omitempty"`
	Recordid               *Recordid                `xml:"recordid"`
	Otherrecordid          []*Otherrecordid         `xml:"otherrecordid"`
	Representation         []*Representation        `xml:"representation"`
	Filedesc               *Filedesc                `xml:"filedesc"`
	Maintenancestatus      *Maintenancestatus       `xml:"maintenancestatus"`
	Publicationstatus      *Publicationstatus       `xml:"publicationstatus"`
	Maintenanceagency      *Maintenanceagency       `xml:"maintenanceagency"`
	Languagedeclaration    []*Languagedeclaration   `xml:"languagedeclaration"`
	Conventiondeclaration  []*Conventiondeclaration `xml:"conventiondeclaration"`
	Rightsdeclaration      []*Rightsdeclaration     `xml:"rightsdeclaration"`
	Localtypedeclaration   []*Localtypedeclaration  `xml:"localtypedeclaration"`
	Localcontrol           []*Localcontrol          `xml:"localcontrol"`
	Maintenancehistory     *Maintenancehistory      `xml:"maintenancehistory"`
	Sources                *Sources                 `xml:"sources"`
}

// Recordid ...
type Recordid struct {
	XMLName            xml.Name `xml:"recordid"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	InstanceurlAttr    string `xml:"instanceurl,attr,omitempty"`
}

// Otherrecordid ...
type Otherrecordid struct {
	XMLName            xml.Name `xml:"otherrecordid"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
}

// Representation ...
type Representation struct {
	XMLName            xml.Name `xml:"representation"`
	AmCommon           *AmCommon
	AmSimplelink       *AmSimplelink
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
}

// Filedesc ...
type Filedesc struct {
	XMLName            xml.Name `xml:"filedesc"`
	AmCommon           *AmCommon
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	Titlestmt          *Titlestmt       `xml:"titlestmt"`
	Editionstmt        *Editionstmt     `xml:"editionstmt"`
	Publicationstmt    *Publicationstmt `xml:"publicationstmt"`
	Seriesstmt         *Seriesstmt      `xml:"seriesstmt"`
	Notestmt           *Notestmt        `xml:"notestmt"`
}

// Titlestmt ...
type Titlestmt struct {
	XMLName            xml.Name `xml:"titlestmt"`
	AmCommon           *AmCommon
	EncodinganalogAttr string         `xml:"encodinganalog,attr,omitempty"`
	Titleproper        []*Titleproper `xml:"titleproper"`
	Subtitle           []*Subtitle    `xml:"subtitle"`
	Author             []*Author      `xml:"author"`
	Sponsor            []*Sponsor     `xml:"sponsor"`
}

// Editionstmt ...
type Editionstmt struct {
	XMLName            xml.Name `xml:"editionstmt"`
	AmCommon           *AmCommon
	EncodinganalogAttr string     `xml:"encodinganalog,attr,omitempty"`
	Edition            []*Edition `xml:"edition"`
	P                  []*P       `xml:"p"`
}

// Publicationstmt ...
type Publicationstmt struct {
	XMLName            xml.Name `xml:"publicationstmt"`
	AmCommon           *AmCommon
	EncodinganalogAttr string       `xml:"encodinganalog,attr,omitempty"`
	Publisher          []*Publisher `xml:"publisher"`
	Date               []string     `xml:"date"`
	Address            []*Address   `xml:"address"`
	Num                []*Num       `xml:"num"`
	P                  []*P         `xml:"p"`
}

// Seriesstmt ...
type Seriesstmt struct {
	XMLName            xml.Name `xml:"seriesstmt"`
	AmCommon           *AmCommon
	EncodinganalogAttr string         `xml:"encodinganalog,attr,omitempty"`
	Titleproper        []*Titleproper `xml:"titleproper"`
	Num                []*Num         `xml:"num"`
	P                  []*P           `xml:"p"`
}

// Notestmt ...
type Notestmt struct {
	XMLName            xml.Name `xml:"notestmt"`
	AmCommon           *AmCommon
	EncodinganalogAttr string         `xml:"encodinganalog,attr,omitempty"`
	Controlnote        []*Controlnote `xml:"controlnote"`
}

// Maintenancestatus ...
type Maintenancestatus struct {
	XMLName            xml.Name `xml:"maintenancestatus"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	ValueAttr          string `xml:"value,attr"`
}

// Publicationstatus ...
type Publicationstatus struct {
	XMLName            xml.Name `xml:"publicationstatus"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	ValueAttr          string `xml:"value,attr"`
}

// Languagedeclaration ...
type Languagedeclaration struct {
	XMLName            xml.Name `xml:"languagedeclaration"`
	AmCommon           *AmCommon
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	Language           string           `xml:"language"`
	Script             *Script          `xml:"script"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Conventiondeclaration ...
type Conventiondeclaration struct {
	XMLName            xml.Name `xml:"conventiondeclaration"`
	AmCommon           *AmCommon
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string           `xml:"localtype,attr,omitempty"`
	Abbr               *Abbr            `xml:"abbr"`
	Citation           *Citation        `xml:"citation"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Rightsdeclaration ...
type Rightsdeclaration struct {
	XMLName            xml.Name `xml:"rightsdeclaration"`
	AmCommon           *AmCommon
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string           `xml:"localtype,attr,omitempty"`
	Abbr               *Abbr            `xml:"abbr"`
	Citation           *Citation        `xml:"citation"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Localtypedeclaration ...
type Localtypedeclaration struct {
	XMLName            xml.Name `xml:"localtypedeclaration"`
	AmCommon           *AmCommon
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	Abbr               *Abbr            `xml:"abbr"`
	Citation           *Citation        `xml:"citation"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Localcontrol ...
type Localcontrol struct {
	XMLName            xml.Name `xml:"localcontrol"`
	AmCommon           *AmCommon
	EncodinganalogAttr string      `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string      `xml:"localtype,attr,omitempty"`
	Term               *Term       `xml:"term"`
	Datesingle         *Datesingle `xml:"datesingle"`
	Daterange          *Daterange  `xml:"daterange"`
}

// Term ...
type Term struct {
	XMLName                  xml.Name `xml:"term"`
	AmCommon                 *AmCommon
	AmAccessNoNormal         *AmAccessNoNormal
	EncodinganalogAttr       string `xml:"encodinganalog,attr,omitempty"`
	TransliterationAttr      string `xml:"transliteration,attr,omitempty"`
	LastdatetimeverifiedAttr string `xml:"lastdatetimeverified,attr,omitempty"`
}

// Maintenancehistory ...
type Maintenancehistory struct {
	XMLName            xml.Name `xml:"maintenancehistory"`
	AmCommon           *AmCommon
	EncodinganalogAttr string              `xml:"encodinganalog,attr,omitempty"`
	Maintenanceevent   []*Maintenanceevent `xml:"maintenanceevent"`
}

// Maintenanceevent ...
type Maintenanceevent struct {
	XMLName            xml.Name `xml:"maintenanceevent"`
	AmCommon           *AmCommon
	EncodinganalogAttr string              `xml:"encodinganalog,attr,omitempty"`
	Eventtype          *Eventtype          `xml:"eventtype"`
	Eventdatetime      *Eventdatetime      `xml:"eventdatetime"`
	Agenttype          *Agenttype          `xml:"agenttype"`
	Agent              *Agent              `xml:"agent"`
	Eventdescription   []*Eventdescription `xml:"eventdescription"`
}

// Eventtype ...
type Eventtype struct {
	XMLName            xml.Name `xml:"eventtype"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	ValueAttr          string `xml:"value,attr"`
}

// Eventdatetime ...
type Eventdatetime struct {
	XMLName              xml.Name `xml:"eventdatetime"`
	AmCommon             *AmCommon
	EncodinganalogAttr   string `xml:"encodinganalog,attr,omitempty"`
	StandarddatetimeAttr string `xml:"standarddatetime,attr,omitempty"`
}

// Agenttype ...
type Agenttype struct {
	XMLName            xml.Name `xml:"agenttype"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	ValueAttr          string `xml:"value,attr"`
}

// Agent ...
type Agent struct {
	XMLName            xml.Name `xml:"agent"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
}

// Eventdescription ...
type Eventdescription struct {
	XMLName            xml.Name `xml:"eventdescription"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
}

// Sources ...
type Sources struct {
	XMLName            xml.Name `xml:"sources"`
	AmCommon           *AmCommon
	EncodinganalogAttr string    `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string    `xml:"localtype,attr,omitempty"`
	BaseAttr           string    `xml:"base,attr,omitempty"`
	Source             []*Source `xml:"source"`
}

// Source ...
type Source struct {
	XMLName                  xml.Name `xml:"source"`
	AmCommon                 *AmCommon
	AmSimplelink             *AmSimplelink
	EncodinganalogAttr       string           `xml:"encodinganalog,attr,omitempty"`
	LastdatetimeverifiedAttr string           `xml:"lastdatetimeverified,attr,omitempty"`
	Sourceentry              []*Sourceentry   `xml:"sourceentry"`
	Objectxmlwrap            *Objectxmlwrap   `xml:"objectxmlwrap"`
	Descriptivenote          *Descriptivenote `xml:"descriptivenote"`
}

// Sourceentry ...
type Sourceentry struct {
	XMLName             xml.Name `xml:"sourceentry"`
	AmCommon            *AmCommon
	EncodinganalogAttr  string `xml:"encodinganalog,attr,omitempty"`
	TransliterationAttr string `xml:"transliteration,attr,omitempty"`
}

// Titleproper ...
type Titleproper struct {
	XMLName            xml.Name `xml:"titleproper"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	RenderAttr         string `xml:"render,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Subtitle ...
type Subtitle struct {
	XMLName            xml.Name `xml:"subtitle"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Author ...
type Author struct {
	XMLName            xml.Name `xml:"author"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Sponsor ...
type Sponsor struct {
	XMLName            xml.Name `xml:"sponsor"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Edition ...
type Edition struct {
	XMLName            xml.Name `xml:"edition"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Publisher ...
type Publisher struct {
	XMLName            xml.Name `xml:"publisher"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Controlnote ...
type Controlnote struct {
	XMLName            xml.Name `xml:"controlnote"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
}

// Maintenanceagency ...
type Maintenanceagency struct {
	XMLName            xml.Name `xml:"maintenanceagency"`
	AmCommon           *AmCommon
	AmCountrycode      *AmCountrycode
	EncodinganalogAttr string             `xml:"encodinganalog,attr,omitempty"`
	Agencycode         *Agencycode        `xml:"agencycode"`
	Otheragencycode    []*Otheragencycode `xml:"otheragencycode"`
	Agencyname         []*Agencyname      `xml:"agencyname"`
	Descriptivenote    *Descriptivenote   `xml:"descriptivenote"`
}

// Agencycode ...
type Agencycode struct {
	XMLName            xml.Name `xml:"agencycode"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
}

// Otheragencycode ...
type Otheragencycode struct {
	XMLName            xml.Name `xml:"otheragencycode"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
}

// Agencyname ...
type Agencyname struct {
	XMLName            xml.Name `xml:"agencyname"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
}

// Citation ...
type Citation struct {
	XMLName                  xml.Name `xml:"citation"`
	AmCommon                 *AmCommon
	AmSimplelink             *AmSimplelink
	EncodinganalogAttr       string `xml:"encodinganalog,attr,omitempty"`
	LastdatetimeverifiedAttr string `xml:"lastdatetimeverified,attr,omitempty"`
	*MMixedBasic
}

// Did ...
type Did struct {
	XMLName            xml.Name `xml:"did"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MDid               []*MDid
	Head               *Head `xml:"head"`
}

// Abstract ...
type Abstract struct {
	XMLName            xml.Name `xml:"abstract"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	LabelAttr          string `xml:"label,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasicPlusAccess
}

// Container ...
type Container struct {
	XMLName            xml.Name `xml:"container"`
	AmCommon           *AmCommon
	LabelAttr          string   `xml:"label,attr,omitempty"`
	LocaltypeAttr      string   `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string   `xml:"encodinganalog,attr,omitempty"`
	ParentAttr         []string `xml:"parent,attr,omitempty"`
	ContaineridAttr    string   `xml:"containerid,attr,omitempty"`
	*MMixedBasic
}

// Dao ...
type Dao struct {
	XMLName            xml.Name `xml:"dao"`
	AmCommon           *AmCommon
	AmSimplelink       *AmSimplelink
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string           `xml:"localtype,attr,omitempty"`
	LabelAttr          string           `xml:"label,attr,omitempty"`
	IdentifierAttr     string           `xml:"identifier,attr,omitempty"`
	XpointerAttr       string           `xml:"xpointer,attr,omitempty"`
	EntityrefAttr      string           `xml:"entityref,attr,omitempty"`
	DaotypeAttr        string           `xml:"daotype,attr"`
	OtherdaotypeAttr   string           `xml:"otherdaotype,attr,omitempty"`
	CoverageAttr       string           `xml:"coverage,attr,omitempty"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Daoset ...
type Daoset struct {
	XMLName            xml.Name `xml:"daoset"`
	AmCommon           *AmCommon
	LocaltypeAttr      string           `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	LabelAttr          string           `xml:"label,attr,omitempty"`
	CoverageAttr       string           `xml:"coverage,attr,omitempty"`
	BaseAttr           string           `xml:"base,attr,omitempty"`
	Dao                []*Dao           `xml:"dao"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Didnote ...
type Didnote struct {
	XMLName            xml.Name `xml:"didnote"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	LabelAttr          string `xml:"label,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Langmaterial ...
type Langmaterial struct {
	XMLName            xml.Name `xml:"langmaterial"`
	AmCommon           *AmCommon
	LabelAttr          string           `xml:"label,attr,omitempty"`
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	Language           []string         `xml:"language"`
	Languageset        []*Languageset   `xml:"languageset"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Materialspec ...
type Materialspec struct {
	XMLName            xml.Name `xml:"materialspec"`
	AmCommon           *AmCommon
	LabelAttr          string `xml:"label,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	*MMixedBasic
}

// Physdescset ...
type Physdescset struct {
	XMLName            xml.Name `xml:"physdescset"`
	AmCommon           *AmCommon
	LabelAttr          string                `xml:"label,attr,omitempty"`
	EncodinganalogAttr string                `xml:"encodinganalog,attr,omitempty"`
	ParallelAttr       *AvBoolean            `xml:"parallel,attr,omitempty"`
	CoverageAttr       string                `xml:"coverage,attr,omitempty"`
	Physdescstructured []*Physdescstructured `xml:"physdescstructured"`
}

// Physloc ...
type Physloc struct {
	XMLName            xml.Name `xml:"physloc"`
	AmCommon           *AmCommon
	LocaltypeAttr      string   `xml:"localtype,attr,omitempty"`
	LabelAttr          string   `xml:"label,attr,omitempty"`
	EncodinganalogAttr string   `xml:"encodinganalog,attr,omitempty"`
	ParentAttr         []string `xml:"parent,attr,omitempty"`
	*MMixedBasic
}

// Origination ...
type Origination struct {
	XMLName            xml.Name `xml:"origination"`
	AmCommon           *AmCommon
	LocaltypeAttr      string      `xml:"localtype,attr,omitempty"`
	LabelAttr          string      `xml:"label,attr,omitempty"`
	EncodinganalogAttr string      `xml:"encodinganalog,attr,omitempty"`
	Corpname           []*Corpname `xml:"corpname"`
	Famname            []*Famname  `xml:"famname"`
	Name               []*Name     `xml:"name"`
	Persname           []*Persname `xml:"persname"`
}

// Physdescstructured ...
type Physdescstructured struct {
	XMLName                         xml.Name `xml:"physdescstructured"`
	AmCommon                        *AmCommon
	ACoverage                       *ACoverage
	LabelAttr                       string           `xml:"label,attr,omitempty"`
	EncodinganalogAttr              string           `xml:"encodinganalog,attr,omitempty"`
	PhysdescstructuredtypeAttr      string           `xml:"physdescstructuredtype,attr"`
	OtherphysdescstructuredtypeAttr string           `xml:"otherphysdescstructuredtype,attr,omitempty"`
	Quantity                        *Quantity        `xml:"quantity"`
	Unittype                        *Unittype        `xml:"unittype"`
	Physfacet                       []*Physfacet     `xml:"physfacet"`
	Dimensions                      []*Dimensions    `xml:"dimensions"`
	Descriptivenote                 *Descriptivenote `xml:"descriptivenote"`
}

// Quantity ...
type Quantity struct {
	XMLName            xml.Name `xml:"quantity"`
	AmCommon           *AmCommon
	EncodinganalogAttr string     `xml:"encodinganalog,attr,omitempty"`
	ApproximateAttr    *AvBoolean `xml:"approximate,attr,omitempty"`
}

// Unittype ...
type Unittype struct {
	XMLName            xml.Name `xml:"unittype"`
	AmCommon           *AmCommon
	AmAccessNoNormal   *AmAccessNoNormal
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
}

// Repository ...
type Repository struct {
	XMLName            xml.Name `xml:"repository"`
	AmCommon           *AmCommon
	LocaltypeAttr      string      `xml:"localtype,attr,omitempty"`
	LabelAttr          string      `xml:"label,attr,omitempty"`
	EncodinganalogAttr string      `xml:"encodinganalog,attr,omitempty"`
	Corpname           []*Corpname `xml:"corpname"`
	Famname            []*Famname  `xml:"famname"`
	Name               []*Name     `xml:"name"`
	Persname           []*Persname `xml:"persname"`
	Address            *Address    `xml:"address"`
}

// Unitdate ...
type Unitdate struct {
	XMLName            xml.Name `xml:"unitdate"`
	AmCommon           *AmCommon
	AUnitdatetype      *AUnitdatetype
	AmDatesEra         *AmDatesEra
	AmDatesCalendar    *AmDatesCalendar
	AmDateNormal       *AmDateNormal
	LabelAttr          string `xml:"label,attr,omitempty"`
	DatecharAttr       string `xml:"datechar,attr,omitempty"`
	CertaintyAttr      string `xml:"certainty,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Unitdatestructured ...
type Unitdatestructured struct {
	XMLName            xml.Name `xml:"unitdatestructured"`
	AmCommon           *AmCommon
	AUnitdatetype      *AUnitdatetype
	AmDatesEra         *AmDatesEra
	AmDatesCalendar    *AmDatesCalendar
	LabelAttr          string      `xml:"label,attr,omitempty"`
	DatecharAttr       string      `xml:"datechar,attr,omitempty"`
	CertaintyAttr      string      `xml:"certainty,attr,omitempty"`
	EncodinganalogAttr string      `xml:"encodinganalog,attr,omitempty"`
	Datesingle         *Datesingle `xml:"datesingle"`
	Daterange          *Daterange  `xml:"daterange"`
	Dateset            *Dateset    `xml:"dateset"`
}

// Unitid ...
type Unitid struct {
	XMLName            xml.Name `xml:"unitid"`
	AmCommon           *AmCommon
	AmCountrycode      *AmCountrycode
	LocaltypeAttr      string      `xml:"localtype,attr,omitempty"`
	LabelAttr          string      `xml:"label,attr,omitempty"`
	RepositorycodeAttr string      `xml:"repositorycode,attr,omitempty"`
	IdentifierAttr     interface{} `xml:"identifier,attr,omitempty"`
	EncodinganalogAttr string      `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Accessrestrict ...
type Accessrestrict struct {
	XMLName            xml.Name `xml:"accessrestrict"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head             `xml:"head"`
	Accessrestrict     []*Accessrestrict `xml:"accessrestrict"`
}

// Accruals ...
type Accruals struct {
	XMLName            xml.Name `xml:"accruals"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head       `xml:"head"`
	Accruals           []*Accruals `xml:"accruals"`
}

// Acqinfo ...
type Acqinfo struct {
	XMLName            xml.Name `xml:"acqinfo"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head      `xml:"head"`
	Acqinfo            []*Acqinfo `xml:"acqinfo"`
}

// Altformavail ...
type Altformavail struct {
	XMLName            xml.Name `xml:"altformavail"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head           `xml:"head"`
	Altformavail       []*Altformavail `xml:"altformavail"`
}

// Appraisal ...
type Appraisal struct {
	XMLName            xml.Name `xml:"appraisal"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head        `xml:"head"`
	Appraisal          []*Appraisal `xml:"appraisal"`
}

// Arrangement ...
type Arrangement struct {
	XMLName            xml.Name `xml:"arrangement"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head          `xml:"head"`
	Arrangement        []*Arrangement `xml:"arrangement"`
}

// Bibliography ...
type Bibliography struct {
	XMLName            xml.Name `xml:"bibliography"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head           `xml:"head"`
	Bibliography       []*Bibliography `xml:"bibliography"`
	Archref            []*Archref      `xml:"archref"`
	Bibref             []*Bibref       `xml:"bibref"`
}

// Bioghist ...
type Bioghist struct {
	XMLName            xml.Name `xml:"bioghist"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head       `xml:"head"`
	Bioghist           []*Bioghist `xml:"bioghist"`
}

// Controlaccess ...
type Controlaccess struct {
	XMLName            xml.Name `xml:"controlaccess"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	MAccess            []*MAccess
	Head               *Head            `xml:"head"`
	Controlaccess      []*Controlaccess `xml:"controlaccess"`
}

// Custodhist ...
type Custodhist struct {
	XMLName            xml.Name `xml:"custodhist"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head         `xml:"head"`
	Custodhist         []*Custodhist `xml:"custodhist"`
}

// Fileplan ...
type Fileplan struct {
	XMLName            xml.Name `xml:"fileplan"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head       `xml:"head"`
	Fileplan           []*Fileplan `xml:"fileplan"`
}

// Index ...
type Index struct {
	XMLName            xml.Name `xml:"index"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head         `xml:"head"`
	Listhead           *Listhead     `xml:"listhead"`
	Indexentry         []*Indexentry `xml:"indexentry"`
	Index              []*Index      `xml:"index"`
}

// Indexentry ...
type Indexentry struct {
	XMLName    xml.Name `xml:"indexentry"`
	AmCommon   *AmCommon
	MAccess    *MAccess
	MRefs      *MRefs
	Namegrp    *Namegrp      `xml:"namegrp"`
	Ptrgrp     *Ptrgrp       `xml:"ptrgrp"`
	Indexentry []*Indexentry `xml:"indexentry"`
}

// Namegrp ...
type Namegrp struct {
	XMLName  xml.Name `xml:"namegrp"`
	AmCommon *AmCommon
	MAccess  []*MAccess
}

// Ptrgrp ...
type Ptrgrp struct {
	XMLName  xml.Name `xml:"ptrgrp"`
	AmCommon *AmCommon
	MRefs    []*MRefs
}

// Legalstatus ...
type Legalstatus struct {
	XMLName            xml.Name `xml:"legalstatus"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head          `xml:"head"`
	Legalstatus        []*Legalstatus `xml:"legalstatus"`
}

// Odd ...
type Odd struct {
	XMLName            xml.Name `xml:"odd"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head  `xml:"head"`
	Odd                []*Odd `xml:"odd"`
}

// Originalsloc ...
type Originalsloc struct {
	XMLName            xml.Name `xml:"originalsloc"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head           `xml:"head"`
	Originalsloc       []*Originalsloc `xml:"originalsloc"`
}

// Otherfindaid ...
type Otherfindaid struct {
	XMLName            xml.Name `xml:"otherfindaid"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head           `xml:"head"`
	Otherfindaid       []*Otherfindaid `xml:"otherfindaid"`
	Archref            []*Archref      `xml:"archref"`
	Bibref             []*Bibref       `xml:"bibref"`
}

// Phystech ...
type Phystech struct {
	XMLName            xml.Name `xml:"phystech"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head       `xml:"head"`
	Phystech           []*Phystech `xml:"phystech"`
}

// Prefercite ...
type Prefercite struct {
	XMLName            xml.Name `xml:"prefercite"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head         `xml:"head"`
	Prefercite         []*Prefercite `xml:"prefercite"`
}

// Processinfo ...
type Processinfo struct {
	XMLName            xml.Name `xml:"processinfo"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head          `xml:"head"`
	Processinfo        []*Processinfo `xml:"processinfo"`
}

// Relatedmaterial ...
type Relatedmaterial struct {
	XMLName            xml.Name `xml:"relatedmaterial"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head              `xml:"head"`
	Relatedmaterial    []*Relatedmaterial `xml:"relatedmaterial"`
	Archref            []*Archref         `xml:"archref"`
	Bibref             []*Bibref          `xml:"bibref"`
}

// Scopecontent ...
type Scopecontent struct {
	XMLName            xml.Name `xml:"scopecontent"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head           `xml:"head"`
	Scopecontent       []*Scopecontent `xml:"scopecontent"`
}

// Separatedmaterial ...
type Separatedmaterial struct {
	XMLName            xml.Name `xml:"separatedmaterial"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head                `xml:"head"`
	Separatedmaterial  []*Separatedmaterial `xml:"separatedmaterial"`
	Archref            []*Archref           `xml:"archref"`
	Bibref             []*Bibref            `xml:"bibref"`
}

// Userestrict ...
type Userestrict struct {
	XMLName            xml.Name `xml:"userestrict"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	MBlocks            []*MBlocks
	Head               *Head          `xml:"head"`
	Userestrict        []*Userestrict `xml:"userestrict"`
}

// Corpname ...
type Corpname struct {
	XMLName            xml.Name `xml:"corpname"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Famname ...
type Famname struct {
	XMLName            xml.Name `xml:"famname"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Function ...
type Function struct {
	XMLName            xml.Name `xml:"function"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Genreform ...
type Genreform struct {
	XMLName            xml.Name `xml:"genreform"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Geogname ...
type Geogname struct {
	XMLName               xml.Name `xml:"geogname"`
	AmCommon              *AmCommon
	AmAccess              *AmAccess
	LocaltypeAttr         string                   `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr    string                   `xml:"encodinganalog,attr,omitempty"`
	RelatorAttr           string                   `xml:"relator,attr,omitempty"`
	Part                  []*Part                  `xml:"part"`
	Geographiccoordinates []*Geographiccoordinates `xml:"geographiccoordinates"`
}

// Geographiccoordinates ...
type Geographiccoordinates struct {
	XMLName              xml.Name `xml:"geographiccoordinates"`
	AmCommon             *AmCommon
	CoordinatesystemAttr string `xml:"coordinatesystem,attr"`
}

// Name ...
type Name struct {
	XMLName            xml.Name `xml:"name"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Occupation ...
type Occupation struct {
	XMLName            xml.Name `xml:"occupation"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Persname ...
type Persname struct {
	XMLName            xml.Name `xml:"persname"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Subject ...
type Subject struct {
	XMLName            xml.Name `xml:"subject"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Title ...
type Title struct {
	XMLName            xml.Name `xml:"title"`
	AmCommon           *AmCommon
	AmAccess           *AmAccess
	LocaltypeAttr      string  `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string  `xml:"encodinganalog,attr,omitempty"`
	RelatorAttr        string  `xml:"relator,attr,omitempty"`
	RenderAttr         string  `xml:"render,attr,omitempty"`
	Part               []*Part `xml:"part"`
}

// Part ...
type Part struct {
	XMLName            xml.Name `xml:"part"`
	AmCommon           *AmCommon
	AmAccessNoNormal   *AmAccessNoNormal
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	*MMixedBasicDate
}

// P ...
type P struct {
	XMLName  xml.Name `xml:"p"`
	AmCommon *AmCommon
	*MParaContent
}

// Blockquote ...
type Blockquote struct {
	XMLName       xml.Name `xml:"blockquote"`
	AmCommon      *AmCommon
	MInterNoquote []*MInterNoquote
	P             []*P `xml:"p"`
}

// Chronlist ...
type Chronlist struct {
	XMLName            xml.Name `xml:"chronlist"`
	AmCommon           *AmCommon
	LocaltypeAttr      string       `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string       `xml:"encodinganalog,attr,omitempty"`
	Head               *Head        `xml:"head"`
	Listhead           *Listhead    `xml:"listhead"`
	Chronitem          []*Chronitem `xml:"chronitem"`
}

// Chronitem ...
type Chronitem struct {
	XMLName       xml.Name `xml:"chronitem"`
	AmCommon      *AmCommon
	LocaltypeAttr string          `xml:"localtype,attr,omitempty"`
	Datesingle    *Datesingle     `xml:"datesingle"`
	Daterange     *Daterange      `xml:"daterange"`
	Dateset       *Dateset        `xml:"dateset"`
	Geogname      *Geogname       `xml:"geogname"`
	Event         *Event          `xml:"event"`
	Chronitemset  []*Chronitemset `xml:"chronitemset"`
}

// Chronitemset ...
type Chronitemset struct {
	XMLName  xml.Name `xml:"chronitemset"`
	AmCommon *AmCommon
	Geogname []*Geogname `xml:"geogname"`
	Event    []*Event    `xml:"event"`
}

// Event ...
type Event struct {
	XMLName       xml.Name `xml:"event"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	*MParaContent
}

// List ...
type List struct {
	XMLName        xml.Name `xml:"list"`
	AmCommon       *AmCommon
	ListtypeAttr   string     `xml:"listtype,attr,omitempty"`
	MarkAttr       string     `xml:"mark,attr,omitempty"`
	NumerationAttr string     `xml:"numeration,attr,omitempty"`
	Head           *Head      `xml:"head"`
	Item           []*Item    `xml:"item"`
	Listhead       *Listhead  `xml:"listhead"`
	Defitem        []*Defitem `xml:"defitem"`
}

// Defitem ...
type Defitem struct {
	XMLName  xml.Name `xml:"defitem"`
	AmCommon *AmCommon
	Label    *Label `xml:"label"`
	Item     *Item  `xml:"item"`
}

// Label ...
type Label struct {
	XMLName  xml.Name `xml:"label"`
	AmCommon *AmCommon
	*MMixedBasic
}

// Item ...
type Item struct {
	XMLName  xml.Name `xml:"item"`
	AmCommon *AmCommon
	*MParaContent
}

// Listhead ...
type Listhead struct {
	XMLName  xml.Name `xml:"listhead"`
	AmCommon *AmCommon
	Head01   *Head01 `xml:"head01"`
	Head02   *Head02 `xml:"head02"`
	Head03   *Head03 `xml:"head03"`
}

// Head01 ...
type Head01 struct {
	XMLName  xml.Name `xml:"head01"`
	AmCommon *AmCommon
	*MMixedBasic
}

// Head02 ...
type Head02 struct {
	XMLName  xml.Name `xml:"head02"`
	AmCommon *AmCommon
	*MMixedBasic
}

// Head03 ...
type Head03 struct {
	XMLName  xml.Name `xml:"head03"`
	AmCommon *AmCommon
	*MMixedBasic
}

// Table ...
type Table struct {
	XMLName    xml.Name `xml:"table"`
	AmCommon   *AmCommon
	FrameAttr  string     `xml:"frame,attr,omitempty"`
	ColsepAttr *AvBoolean `xml:"colsep,attr,omitempty"`
	RowsepAttr *AvBoolean `xml:"rowsep,attr,omitempty"`
	PgwideAttr *AvBoolean `xml:"pgwide,attr,omitempty"`
	Head       *Head      `xml:"head"`
	Tgroup     []*Tgroup  `xml:"tgroup"`
}

// Tgroup ...
type Tgroup struct {
	XMLName    xml.Name `xml:"tgroup"`
	AmCommon   *AmCommon
	ColsAttr   string     `xml:"cols,attr"`
	ColsepAttr *AvBoolean `xml:"colsep,attr,omitempty"`
	RowsepAttr *AvBoolean `xml:"rowsep,attr,omitempty"`
	AlignAttr  string     `xml:"align,attr,omitempty"`
	Colspec    []*Colspec `xml:"colspec"`
	Thead      *Thead     `xml:"thead"`
	Tbody      *Tbody     `xml:"tbody"`
}

// Colspec ...
type Colspec struct {
	XMLName      xml.Name   `xml:"colspec"`
	ColnumAttr   string     `xml:"colnum,attr,omitempty"`
	ColnameAttr  string     `xml:"colname,attr,omitempty"`
	ColwidthAttr string     `xml:"colwidth,attr,omitempty"`
	ColsepAttr   *AvBoolean `xml:"colsep,attr,omitempty"`
	RowsepAttr   *AvBoolean `xml:"rowsep,attr,omitempty"`
	AlignAttr    string     `xml:"align,attr,omitempty"`
	CharAttr     string     `xml:"char,attr,omitempty"`
	CharoffAttr  string     `xml:"charoff,attr,omitempty"`
}

// Tbody ...
type Tbody struct {
	XMLName    xml.Name `xml:"tbody"`
	AmCommon   *AmCommon
	ValignAttr string `xml:"valign,attr,omitempty"`
	Row        []*Row `xml:"row"`
}

// Row ...
type Row struct {
	XMLName    xml.Name `xml:"row"`
	AmCommon   *AmCommon
	RowsepAttr *AvBoolean `xml:"rowsep,attr,omitempty"`
	ValignAttr string     `xml:"valign,attr,omitempty"`
	Entry      []*Entry   `xml:"entry"`
}

// Entry ...
type Entry struct {
	XMLName      xml.Name `xml:"entry"`
	AmCommon     *AmCommon
	ColnameAttr  string     `xml:"colname,attr,omitempty"`
	NamestAttr   string     `xml:"namest,attr,omitempty"`
	NameendAttr  string     `xml:"nameend,attr,omitempty"`
	MorerowsAttr string     `xml:"morerows,attr,omitempty"`
	ColsepAttr   *AvBoolean `xml:"colsep,attr,omitempty"`
	RowsepAttr   *AvBoolean `xml:"rowsep,attr,omitempty"`
	AlignAttr    string     `xml:"align,attr,omitempty"`
	CharAttr     string     `xml:"char,attr,omitempty"`
	CharoffAttr  string     `xml:"charoff,attr,omitempty"`
	ValignAttr   string     `xml:"valign,attr,omitempty"`
	*MParaContent
}

// Thead ...
type Thead struct {
	XMLName    xml.Name `xml:"thead"`
	AmCommon   *AmCommon
	ValignAttr string `xml:"valign,attr,omitempty"`
	Row        []*Row `xml:"row"`
}

// Language ...
type Language struct {
	XMLName            xml.Name `xml:"language"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LabelAttr          string `xml:"label,attr,omitempty"`
	LangcodeAttr       string `xml:"langcode,attr,omitempty"`
}

// Languageset ...
type Languageset struct {
	XMLName            xml.Name `xml:"languageset"`
	AmCommon           *AmCommon
	EncodinganalogAttr string           `xml:"encodinganalog,attr,omitempty"`
	Language           []string         `xml:"language"`
	Script             []*Script        `xml:"script"`
	Descriptivenote    *Descriptivenote `xml:"descriptivenote"`
}

// Script ...
type Script struct {
	XMLName            xml.Name `xml:"script"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LabelAttr          string `xml:"label,attr,omitempty"`
	ScriptcodeAttr     string `xml:"scriptcode,attr,omitempty"`
}

// Dimensions ...
type Dimensions struct {
	XMLName             xml.Name `xml:"dimensions"`
	AmCommon            *AmCommon
	EncodinganalogAttr  string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr       string `xml:"localtype,attr,omitempty"`
	UnitAttr            string `xml:"unit,attr,omitempty"`
	MMixedBasicElements []*MMixedBasicElements
	Dimensions          []*Dimensions `xml:"dimensions"`
}

// Physfacet ...
type Physfacet struct {
	XMLName            xml.Name `xml:"physfacet"`
	AmCommon           *AmCommon
	AmAccessNoNormal   *AmAccessNoNormal
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	*MMixedBasicPlusAccess
}

// Address ...
type Address struct {
	XMLName     xml.Name `xml:"address"`
	AmCommon    *AmCommon
	Addressline []*Addressline `xml:"addressline"`
}

// Addressline ...
type Addressline struct {
	XMLName       xml.Name `xml:"addressline"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	*MMixedBasic
}

// Archref ...
type Archref struct {
	XMLName            xml.Name `xml:"archref"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasicPlusAccess
}

// Descriptivenote ...
type Descriptivenote struct {
	XMLName            xml.Name `xml:"descriptivenote"`
	AmCommon           *AmCommon
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	P                  []*P   `xml:"p"`
}

// Footnote ...
type Footnote struct {
	XMLName       xml.Name `xml:"footnote"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	ShowAttr      string `xml:"show,attr,omitempty"`
	ActuateAttr   string `xml:"actuate,attr,omitempty"`
	MBlocks       []*MBlocks
}

// Head ...
type Head struct {
	XMLName     xml.Name `xml:"head"`
	AmCommon    *AmCommon
	AltheadAttr string `xml:"althead,attr,omitempty"`
	*MMixedBasic
}

// Datesingle ...
type Datesingle struct {
	XMLName       xml.Name `xml:"datesingle"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	*MDatesingle
}

// Daterange ...
type Daterange struct {
	XMLName       xml.Name `xml:"daterange"`
	AmCommon      *AmCommon
	LocaltypeAttr string    `xml:"localtype,attr,omitempty"`
	Fromdate      *Fromdate `xml:"fromdate"`
	Todate        *Todate   `xml:"todate"`
}

// Fromdate ...
type Fromdate struct {
	XMLName       xml.Name `xml:"fromdate"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	*MDatesingle
}

// Todate ...
type Todate struct {
	XMLName       xml.Name `xml:"todate"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	*MDatesingle
}

// Dateset ...
type Dateset struct {
	XMLName       xml.Name `xml:"dateset"`
	AmCommon      *AmCommon
	LocaltypeAttr string        `xml:"localtype,attr,omitempty"`
	Datesingle    []*Datesingle `xml:"datesingle"`
	Daterange     []*Daterange  `xml:"daterange"`
}

// Abbr ...
type Abbr struct {
	XMLName   xml.Name `xml:"abbr"`
	AmCommon  *AmCommon
	ExpanAttr string `xml:"expan,attr,omitempty"`
}

// Date ...
type Date struct {
	XMLName            xml.Name `xml:"date"`
	AmCommon           *AmCommon
	AmDatesEra         *AmDatesEra
	AmDatesCalendar    *AmDatesCalendar
	AmDateNormal       *AmDateNormal
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	CertaintyAttr      string `xml:"certainty,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Emph ...
type Emph struct {
	XMLName    xml.Name `xml:"emph"`
	AmCommon   *AmCommon
	RenderAttr string `xml:"render,attr,omitempty"`
	*MMixedBasic
}

// Expan ...
type Expan struct {
	XMLName  xml.Name `xml:"expan"`
	AmCommon *AmCommon
	AbbrAttr string `xml:"abbr,attr,omitempty"`
}

// Foreign ...
type Foreign struct {
	XMLName    xml.Name `xml:"foreign"`
	AmCommon   *AmCommon
	RenderAttr string `xml:"render,attr,omitempty"`
}

// Lb ...
type Lb struct {
	XMLName xml.Name `xml:"lb"`
}

// Num ...
type Num struct {
	XMLName            xml.Name `xml:"num"`
	AmCommon           *AmCommon
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	*MMixedBasic
}

// Quote ...
type Quote struct {
	XMLName       xml.Name `xml:"quote"`
	AmCommon      *AmCommon
	LocaltypeAttr string `xml:"localtype,attr,omitempty"`
	RenderAttr    string `xml:"render,attr,omitempty"`
	*MMixedBasic
}

// Ptr ...
type Ptr struct {
	XMLName       xml.Name `xml:"ptr"`
	AmCommonEmpty *AmCommonEmpty
	AmInternalPtr *AmInternalPtr
	EntityrefAttr string `xml:"entityref,attr,omitempty"`
}

// Ref ...
type Ref struct {
	XMLName       xml.Name `xml:"ref"`
	AmCommon      *AmCommon
	AmInternalPtr *AmInternalPtr
	EntityrefAttr string `xml:"entityref,attr,omitempty"`
	MAccess       []*MAccess
	Abbr          []*Abbr     `xml:"abbr"`
	Expan         []*Expan    `xml:"expan"`
	Emph          []*Emph     `xml:"emph"`
	Foreign       []*Foreign  `xml:"foreign"`
	Lb            []*Lb       `xml:"lb"`
	Ptr           []*Ptr      `xml:"ptr"`
	Quote         []*Quote    `xml:"quote"`
	Num           []*Num      `xml:"num"`
	Footnote      []*Footnote `xml:"footnote"`
	Date          []string    `xml:"date"`
}

// Relations ...
type Relations struct {
	XMLName            xml.Name `xml:"relations"`
	AmCommon           *AmCommon
	EncodinganalogAttr string      `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string      `xml:"localtype,attr,omitempty"`
	BaseAttr           string      `xml:"base,attr,omitempty"`
	Relation           []*Relation `xml:"relation"`
}

// Relation ...
type Relation struct {
	XMLName                  xml.Name `xml:"relation"`
	AmCommon                 *AmCommon
	AmSimplelink             *AmSimplelink
	EncodinganalogAttr       string           `xml:"encodinganalog,attr,omitempty"`
	RelationtypeAttr         string           `xml:"relationtype,attr"`
	OtherrelationtypeAttr    string           `xml:"otherrelationtype,attr,omitempty"`
	LastdatetimeverifiedAttr string           `xml:"lastdatetimeverified,attr,omitempty"`
	Relationentry            []*Relationentry `xml:"relationentry"`
	Objectxmlwrap            *Objectxmlwrap   `xml:"objectxmlwrap"`
	Datesingle               *Datesingle      `xml:"datesingle"`
	Daterange                *Daterange       `xml:"daterange"`
	Dateset                  *Dateset         `xml:"dateset"`
	Geogname                 *Geogname        `xml:"geogname"`
	Descriptivenote          *Descriptivenote `xml:"descriptivenote"`
}

// Relationentry ...
type Relationentry struct {
	XMLName             xml.Name `xml:"relationentry"`
	AmCommon            *AmCommon
	EncodinganalogAttr  string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr       string `xml:"localtype,attr,omitempty"`
	TransliterationAttr string `xml:"transliteration,attr,omitempty"`
}

// MBlocks ...
type MBlocks struct {
	XMLName xml.Name `xml:"m.blocks"`
	P       *P
	MInter  *MInter
}

// MInter ...
type MInter struct {
	XMLName       xml.Name `xml:"m.inter"`
	Blockquote    *Blockquote
	MInterNoquote *MInterNoquote
}

// MInterNoquote ...
type MInterNoquote struct {
	XMLName   xml.Name `xml:"m.inter.noquote"`
	Chronlist *Chronlist
	List      *List
	Table     *Table
}

// MCOrC01 ...
type MCOrC01 struct {
	XMLName xml.Name `xml:"m.cOrC01"`
	C       []*C
	C01     []*C01
}

// MAccess ...
type MAccess struct {
	XMLName    xml.Name `xml:"m.access"`
	Persname   *Persname
	Corpname   *Corpname
	Famname    *Famname
	Geogname   *Geogname
	Name       *Name
	Occupation *Occupation
	Subject    *Subject
	Genreform  *Genreform
	Function   *Function
	Title      *Title
}

// MDatesingle ...
type MDatesingle struct {
	XMLName          xml.Name `xml:"m.datesingle"`
	StandarddateAttr string   `xml:"standarddate,attr,omitempty"`
	NotbeforeAttr    string   `xml:"notbefore,attr,omitempty"`
	NotafterAttr     string   `xml:"notafter,attr,omitempty"`
	*MMixedBasic
}

// MDescBase ...
type MDescBase struct {
	XMLName           xml.Name `xml:"m.desc.base"`
	Accessrestrict    *Accessrestrict
	Accruals          *Accruals
	Acqinfo           *Acqinfo
	Altformavail      *Altformavail
	Appraisal         *Appraisal
	Arrangement       *Arrangement
	Bibliography      *Bibliography
	Bioghist          *Bioghist
	Controlaccess     *Controlaccess
	Custodhist        *Custodhist
	Fileplan          *Fileplan
	Index             *Index
	Legalstatus       *Legalstatus
	Odd               *Odd
	Originalsloc      *Originalsloc
	Otherfindaid      *Otherfindaid
	Phystech          *Phystech
	Prefercite        *Prefercite
	Processinfo       *Processinfo
	Relatedmaterial   *Relatedmaterial
	Relations         *Relations
	Scopecontent      *Scopecontent
	Separatedmaterial *Separatedmaterial
	Userestrict       *Userestrict
}

// MDid ...
type MDid struct {
	XMLName            xml.Name `xml:"m.did"`
	Abstract           *Abstract
	Container          *Container
	Dao                *Dao
	Daoset             *Daoset
	Didnote            *Didnote
	Langmaterial       *Langmaterial
	Materialspec       *Materialspec
	Origination        *Origination
	Physdescset        *Physdescset
	Physdesc           *Physdesc
	Physdescstructured *Physdescstructured
	Physloc            *Physloc
	Repository         *Repository
	Unitdate           *Unitdate
	Unitdatestructured *Unitdatestructured
	Unitid             *Unitid
	Unittitle          *Unittitle
}

// MRefs ...
type MRefs struct {
	XMLName xml.Name `xml:"m.refs"`
	Ptr     *Ptr
	Ref     *Ref
}

// MMixedBasicElements ...
type MMixedBasicElements struct {
	XMLName xml.Name `xml:"m.mixed.basic.elements"`
	Abbr    *Abbr
	Emph    *Emph
	Expan   *Expan
	Foreign *Foreign
	Lb      *Lb
	Ptr     *Ptr
	Ref     *Ref
}

// MMixedBasic ...
type MMixedBasic struct {
	XMLName             xml.Name `xml:"m.mixed.basic"`
	MMixedBasicElements []*MMixedBasicElements
}

// MMixedBasicDateElements ...
type MMixedBasicDateElements struct {
	XMLName xml.Name `xml:"m.mixed.basic.date.elements"`
	Abbr    *Abbr
	Date    string
	Emph    *Emph
	Expan   *Expan
	Foreign *Foreign
	Lb      *Lb
	Ptr     *Ptr
	Ref     *Ref
}

// MMixedBasicDate ...
type MMixedBasicDate struct {
	XMLName                 xml.Name `xml:"m.mixed.basic.date"`
	MMixedBasicDateElements []*MMixedBasicDateElements
}

// MMixedBasicPlusElements ...
type MMixedBasicPlusElements struct {
	XMLName             xml.Name `xml:"m.mixed.basic.plus.elements"`
	Date                string
	Footnote            *Footnote
	Num                 *Num
	Quote               *Quote
	MMixedBasicElements *MMixedBasicElements
}

// MMixedBasicPlusAccess ...
type MMixedBasicPlusAccess struct {
	XMLName             xml.Name `xml:"m.mixed.basic.plus.access"`
	MMixedBasicElements []*MMixedBasicElements
	MAccess             []*MAccess
	Date                []string    `xml:"date"`
	Footnote            []*Footnote `xml:"footnote"`
	Num                 []*Num      `xml:"num"`
	Quote               []*Quote    `xml:"quote"`
}

// MParaContent ...
type MParaContent struct {
	XMLName                 xml.Name `xml:"m.para.content"`
	MMixedBasicPlusElements []*MMixedBasicPlusElements
	MAccess                 []*MAccess
	List                    []*List `xml:"list"`
}

// AmSimplelink ...
type AmSimplelink struct {
	XMLName xml.Name `xml:"am.simplelink"`
}

// AmInternalPtr ...
type AmInternalPtr struct {
	XMLName      xml.Name `xml:"am.internal.ptr"`
	TargetAttr   string   `xml:"target,attr,omitempty"`
	XpointerAttr string   `xml:"xpointer,attr,omitempty"`
}

// AmCommonEmpty ...
type AmCommonEmpty struct {
	XMLName       xml.Name `xml:"am.common.empty"`
	IdAttr        string   `xml:"id,attr,omitempty"`
	AltrenderAttr string   `xml:"altrender,attr,omitempty"`
	AudienceAttr  string   `xml:"audience,attr,omitempty"`
}

// AmCommon ...
type AmCommon struct {
	XMLName    xml.Name `xml:"am.common"`
	LangAttr   string   `xml:"lang,attr,omitempty"`
	ScriptAttr string   `xml:"script,attr,omitempty"`
}

// AmDescBase ...
type AmDescBase struct {
	XMLName            xml.Name `xml:"am.desc.base"`
	OtherlevelAttr     string   `xml:"otherlevel,attr,omitempty"`
	EncodinganalogAttr string   `xml:"encodinganalog,attr,omitempty"`
}

// AmDescC ...
type AmDescC struct {
	XMLName   xml.Name `xml:"am.desc.c"`
	BaseAttr  string   `xml:"base,attr,omitempty"`
	LevelAttr string   `xml:"level,attr,omitempty"`
}

// AmAccessNoNormal ...
type AmAccessNoNormal struct {
	XMLName xml.Name `xml:"am.access.no.normal"`
}

// AmAccess ...
type AmAccess struct {
	XMLName    xml.Name `xml:"am.access"`
	NormalAttr string   `xml:"normal,attr,omitempty"`
}

// ALinkActuate ...
type ALinkActuate struct {
	XMLName     xml.Name `xml:"a.link.actuate"`
	ActuateAttr string   `xml:"actuate,attr"`
}

// ALinkArcrole ...
type ALinkArcrole struct {
	XMLName     xml.Name `xml:"a.link.arcrole"`
	ArcroleAttr string   `xml:"arcrole,attr"`
}

// ALinkHref ...
type ALinkHref struct {
	XMLName  xml.Name `xml:"a.link.href"`
	HrefAttr string   `xml:"href,attr"`
}

// ALinkRole ...
type ALinkRole struct {
	XMLName      xml.Name `xml:"a.link.role"`
	LinkroleAttr string   `xml:"linkrole,attr"`
}

// ALinkShow ...
type ALinkShow struct {
	XMLName  xml.Name `xml:"a.link.show"`
	ShowAttr string   `xml:"show,attr"`
}

// ALinkTitle ...
type ALinkTitle struct {
	XMLName       xml.Name `xml:"a.link.title"`
	LinktitleAttr string   `xml:"linktitle,attr"`
}

// ABase ...
type ABase struct {
	XMLName  xml.Name `xml:"a.base"`
	BaseAttr string   `xml:"base,attr"`
}

// AIdentifier ...
type AIdentifier struct {
	XMLName        xml.Name `xml:"a.identifier"`
	IdentifierAttr string   `xml:"identifier,attr"`
}

// AParent ...
type AParent struct {
	XMLName    xml.Name `xml:"a.parent"`
	ParentAttr []string `xml:"parent,attr"`
}

// ARelator ...
type ARelator struct {
	XMLName     xml.Name `xml:"a.relator"`
	RelatorAttr string   `xml:"relator,attr"`
}

// ALinkXpointer ...
type ALinkXpointer struct {
	XMLName      xml.Name `xml:"a.link.xpointer"`
	XpointerAttr string   `xml:"xpointer,attr"`
}

// AEntityref ...
type AEntityref struct {
	XMLName       xml.Name `xml:"a.entityref"`
	EntityrefAttr string   `xml:"entityref,attr"`
}

// AAlign ...
type AAlign struct {
	XMLName   xml.Name `xml:"a.align"`
	AlignAttr string   `xml:"align,attr"`
}

// AValign ...
type AValign struct {
	XMLName    xml.Name `xml:"a.valign"`
	ValignAttr string   `xml:"valign,attr"`
}

// ARender ...
type ARender struct {
	XMLName    xml.Name `xml:"a.render"`
	RenderAttr string   `xml:"render,attr"`
}

// ALabel ...
type ALabel struct {
	XMLName   xml.Name `xml:"a.label"`
	LabelAttr string   `xml:"label,attr"`
}

// AmDatesCalendar ...
type AmDatesCalendar struct {
	XMLName      xml.Name `xml:"am.dates.calendar"`
	CalendarAttr string   `xml:"calendar,attr,omitempty"`
}

// AmDatesEra ...
type AmDatesEra struct {
	XMLName xml.Name `xml:"am.dates.era"`
	EraAttr string   `xml:"era,attr,omitempty"`
}

// AmDateNormal ...
type AmDateNormal struct {
	XMLName    xml.Name `xml:"am.date.normal"`
	NormalAttr string   `xml:"normal,attr,omitempty"`
}

// ALastdatetimeverified ...
type ALastdatetimeverified struct {
	XMLName                  xml.Name `xml:"a.lastdatetimeverified"`
	LastdatetimeverifiedAttr string   `xml:"lastdatetimeverified,attr"`
}

// ADatechar ...
type ADatechar struct {
	XMLName      xml.Name `xml:"a.datechar"`
	DatecharAttr string   `xml:"datechar,attr"`
}

// ACertainty ...
type ACertainty struct {
	XMLName       xml.Name `xml:"a.certainty"`
	CertaintyAttr string   `xml:"certainty,attr"`
}

// ANormal ...
type ANormal struct {
	XMLName    xml.Name `xml:"a.normal"`
	NormalAttr string   `xml:"normal,attr"`
}

// AEncodinganalog ...
type AEncodinganalog struct {
	XMLName            xml.Name `xml:"a.encodinganalog"`
	EncodinganalogAttr string   `xml:"encodinganalog,attr"`
}

// ALevel ...
type ALevel struct {
	XMLName   xml.Name `xml:"a.level"`
	LevelAttr string   `xml:"level,attr"`
}

// ALocaltype ...
type ALocaltype struct {
	XMLName       xml.Name `xml:"a.localtype"`
	LocaltypeAttr string   `xml:"localtype,attr"`
}

// ARelatedencoding ...
type ARelatedencoding struct {
	XMLName             xml.Name `xml:"a.relatedencoding"`
	RelatedencodingAttr string   `xml:"relatedencoding,attr"`
}

// AUnitdatetype ...
type AUnitdatetype struct {
	XMLName          xml.Name `xml:"a.unitdatetype"`
	UnitdatetypeAttr string   `xml:"unitdatetype,attr,omitempty"`
}

// AChar ...
type AChar struct {
	XMLName  xml.Name `xml:"a.char"`
	CharAttr string   `xml:"char,attr"`
}

// ACharoff ...
type ACharoff struct {
	XMLName     xml.Name `xml:"a.charoff"`
	CharoffAttr string   `xml:"charoff,attr"`
}

// AColname ...
type AColname struct {
	XMLName     xml.Name `xml:"a.colname"`
	ColnameAttr string   `xml:"colname,attr"`
}

// AColsep ...
type AColsep struct {
	XMLName    xml.Name   `xml:"a.colsep"`
	ColsepAttr *AvBoolean `xml:"colsep,attr"`
}

// ARowsep ...
type ARowsep struct {
	XMLName    xml.Name   `xml:"a.rowsep"`
	RowsepAttr *AvBoolean `xml:"rowsep,attr"`
}

// ACoverage ...
type ACoverage struct {
	XMLName      xml.Name `xml:"a.coverage"`
	CoverageAttr string   `xml:"coverage,attr"`
}

// AmCountrycode ...
type AmCountrycode struct {
	XMLName         xml.Name `xml:"am.countrycode"`
	CountrycodeAttr string   `xml:"countrycode,attr,omitempty"`
}

// ATransliteration ...
type ATransliteration struct {
	XMLName             xml.Name `xml:"a.transliteration"`
	TransliterationAttr string   `xml:"transliteration,attr"`
}

// Bibseries ...
type Bibseries struct {
	XMLName            xml.Name `xml:"bibseries"`
	AmCommon           *AmCommon
	EncodinganalogAttr interface{} `xml:"encodinganalog,attr,omitempty"`
	Emph               []*Emph     `xml:"emph"`
	Lb                 []*Lb       `xml:"lb"`
	Ptr                []*Ptr      `xml:"ptr"`
	Ref                []*Ref      `xml:"ref"`
	Title              []*Title    `xml:"title"`
	Num                []*Num      `xml:"num"`
}

// Div ...
type Div struct {
	XMLName  xml.Name `xml:"div"`
	AmCommon *AmCommon
	MBlocks  []*MBlocks
	Head     *Head  `xml:"head"`
	Div      []*Div `xml:"div"`
}

// Runner ...
type Runner struct {
	XMLName       xml.Name `xml:"runner"`
	AmCommon      *AmCommon
	PlacementAttr string      `xml:"placement,attr,omitempty"`
	RoleAttr      interface{} `xml:"role,attr,omitempty"`
	Emph          []*Emph     `xml:"emph"`
	Lb            []*Lb       `xml:"lb"`
	Ptr           []*Ptr      `xml:"ptr"`
}

// MDescBaseDescgrp ...
type MDescBaseDescgrp struct {
	XMLName           xml.Name `xml:"m.desc.base.descgrp"`
	Accessrestrict    *Accessrestrict
	Accruals          *Accruals
	Acqinfo           *Acqinfo
	Altformavail      *Altformavail
	Appraisal         *Appraisal
	Arrangement       *Arrangement
	Bibliography      *Bibliography
	Bioghist          *Bioghist
	Controlaccess     *Controlaccess
	Custodhist        *Custodhist
	Descgrp           *Descgrp
	Fileplan          *Fileplan
	Index             *Index
	Legalstatus       *Legalstatus
	Odd               *Odd
	Originalsloc      *Originalsloc
	Otherfindaid      *Otherfindaid
	Phystech          *Phystech
	Prefercite        *Prefercite
	Processinfo       *Processinfo
	Relatedmaterial   *Relatedmaterial
	Relations         *Relations
	Scopecontent      *Scopecontent
	Separatedmaterial *Separatedmaterial
	Userestrict       *Userestrict
}

// Descgrp ...
type Descgrp struct {
	XMLName            xml.Name `xml:"descgrp"`
	AmCommon           *AmCommon
	LocaltypeAttr      string               `xml:"localtype,attr,omitempty"`
	EncodinganalogAttr string               `xml:"encodinganalog,attr,omitempty"`
	Head               *Head                `xml:"head"`
	P                  []*P                 `xml:"p"`
	Blockquote         []*Blockquote        `xml:"blockquote"`
	Chronlist          []*Chronlist         `xml:"chronlist"`
	List               []*List              `xml:"list"`
	Table              []*Table             `xml:"table"`
	Accessrestrict     []*Accessrestrict    `xml:"accessrestrict"`
	Accruals           []*Accruals          `xml:"accruals"`
	Acqinfo            []*Acqinfo           `xml:"acqinfo"`
	Altformavail       []*Altformavail      `xml:"altformavail"`
	Appraisal          []*Appraisal         `xml:"appraisal"`
	Arrangement        []*Arrangement       `xml:"arrangement"`
	Bibliography       []*Bibliography      `xml:"bibliography"`
	Bioghist           []*Bioghist          `xml:"bioghist"`
	Controlaccess      []*Controlaccess     `xml:"controlaccess"`
	Custodhist         []*Custodhist        `xml:"custodhist"`
	Descgrp            []*Descgrp           `xml:"descgrp"`
	Fileplan           []*Fileplan          `xml:"fileplan"`
	Index              []*Index             `xml:"index"`
	Legalstatus        []*Legalstatus       `xml:"legalstatus"`
	Odd                []*Odd               `xml:"odd"`
	Originalsloc       []*Originalsloc      `xml:"originalsloc"`
	Otherfindaid       []*Otherfindaid      `xml:"otherfindaid"`
	Phystech           []*Phystech          `xml:"phystech"`
	Prefercite         []*Prefercite        `xml:"prefercite"`
	Processinfo        []*Processinfo       `xml:"processinfo"`
	Relatedmaterial    []*Relatedmaterial   `xml:"relatedmaterial"`
	Relations          []*Relations         `xml:"relations"`
	Scopecontent       []*Scopecontent      `xml:"scopecontent"`
	Separatedmaterial  []*Separatedmaterial `xml:"separatedmaterial"`
	Userestrict        []*Userestrict       `xml:"userestrict"`
}

// MCBaseDescgrp ...
type MCBaseDescgrp struct {
	XMLName          xml.Name `xml:"m.c.base.descgrp"`
	AmDescC          *AmDescC
	TpatternAttr     string `xml:"tpattern,attr,omitempty"`
	MDescBaseDescgrp []*MDescBaseDescgrp
	Head             *Head `xml:"head"`
	Did              *Did  `xml:"did"`
}

// Imprint ...
type Imprint struct {
	XMLName            xml.Name `xml:"imprint"`
	AmCommon           *AmCommon
	EncodinganalogAttr string       `xml:"encodinganalog,attr,omitempty"`
	Publisher          []*Publisher `xml:"publisher"`
	Geogname           []*Geogname  `xml:"geogname"`
	Date               []string     `xml:"date"`
	Emph               []*Emph      `xml:"emph"`
	Lb                 []*Lb        `xml:"lb"`
	Ptr                []*Ptr       `xml:"ptr"`
}

// Frontmatter ...
type Frontmatter struct {
	XMLName   xml.Name `xml:"frontmatter"`
	AmCommon  *AmCommon
	Titlepage *Titlepage `xml:"titlepage"`
	Div       []*Div     `xml:"div"`
}

// Titlepage ...
type Titlepage struct {
	XMLName     xml.Name `xml:"titlepage"`
	AmCommon    *AmCommon
	MBlocks     []*MBlocks
	Author      []*Author      `xml:"author"`
	Date        []string       `xml:"date"`
	Edition     []*Edition     `xml:"edition"`
	Num         []*Num         `xml:"num"`
	Publisher   []*Publisher   `xml:"publisher"`
	Bibseries   []*Bibseries   `xml:"bibseries"`
	Sponsor     []*Sponsor     `xml:"sponsor"`
	Titleproper []*Titleproper `xml:"titleproper"`
	Subtitle    []*Subtitle    `xml:"subtitle"`
}

// Extent ...
type Extent struct {
	XMLName            xml.Name `xml:"extent"`
	AmCommon           *AmCommon
	LabelAttr          string `xml:"label,attr,omitempty"`
	EncodinganalogAttr string `xml:"encodinganalog,attr,omitempty"`
	LocaltypeAttr      string `xml:"localtype,attr,omitempty"`
	UnitAttr           string `xml:"unit,attr,omitempty"`
	*MMixedBasic
}

// MMixedBasicPlusAccessRef ...
type MMixedBasicPlusAccessRef struct {
	XMLName             xml.Name `xml:"m.mixed.basic.plus.access.ref"`
	MMixedBasicElements []*MMixedBasicElements
	MAccess             []*MAccess
	Date                []string     `xml:"date"`
	Footnote            []*Footnote  `xml:"footnote"`
	Num                 []*Num       `xml:"num"`
	Quote               []*Quote     `xml:"quote"`
	Bibseries           []*Bibseries `xml:"bibseries"`
	Imprint             []*Imprint   `xml:"imprint"`
}
